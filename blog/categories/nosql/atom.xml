<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: nosql | Happy Coding, Happy Life]]></title>
  <link href="http://wldandan.github.com/blog/categories/nosql/atom.xml" rel="self"/>
  <link href="http://wldandan.github.com/"/>
  <updated>2020-01-26T18:20:21+08:00</updated>
  <id>http://wldandan.github.com/</id>
  <author>
    <name><![CDATA[wldandan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How to setup mongo shard]]></title>
    <link href="http://wldandan.github.com/blog/2014/04/23/how-to-setup-mongo-shard/"/>
    <updated>2014-04-23T09:44:00+08:00</updated>
    <id>http://wldandan.github.com/blog/2014/04/23/how-to-setup-mongo-shard</id>
    <content type="html"><![CDATA[<p>To simulate the process of production deployment of MongoDB, I used Vagrant to create a couples of VMs, and exprienced the journey of deployment mongo step by step as follow mentioned.</p>

<h3>Mongo Shard Concepts</h3>

<p>Before dived into the code, we can review the concepts related to Mongo Shard, it needs 3 components logically at least.</p>

<h4>a) Config Server</h4>

<p>The config server processes are mongod instances that   store the cluster’s metadata. You designate a mongod as a config server using the &ndash;configsvr option. Each config server stores a complete copy of the cluster’s metadata.</p>

<h4>b) Query Server</h4>

<p>The query server are lightweight mongos instances and   do not require data directories. You can run a mongos   instance on a system that runs other cluster    components, such as on an application server or a   server running a mongod process. By default, a mongos   instance runs on port 27017.</p>

<!--More-->


<h4>c) Shard Server</h4>

<p>The shard server is a component which can consist of    a repicaSet(multiple machines).</p>

<h3>Mongo Shard Setup</h3>

<h4>a) Create mongo box</h4>

<pre><code>vagrant box add precise64 http://files.vagrantup.com/precise64.box  
setup mongo as [Mongo GUide](http://example.net/) mentioned
vagrant package --base default --output mongo_vm.box
</code></pre>

<h4>b) Create several VMs</h4>

<p>Please check the vagrant config file from here
3 config servers
2 query servers
2 replicaSet and each replica has 2 instances.</p>

<h4>c) Setup the shard</h4>

<pre><code>1) start config servers
    (ssh to 192.168.2.21 config1): mongod --configsvr --dbpath /home/vagrant/mongo-config --port 27020
    (ssh to 192.168.2.22 config2): mongod --configsvr --dbpath /home/vagrant/mongo-config --port 27020
    (ssh to 192.168.2.23 config3): mongod --configsvr --dbpath /home/vagrant/mongo-config --port 27020

2) start query servers
    (ssh to 192.168.2.31 router1): mongos --configdb 192.168.2.21:27020,192.168.2.22:27020,192.168.2.23:27020 --port 27017 --chunkSize 2
    (ssh to 192.168.2.32 router2): mongos --configdb 192.168.2.21:27020,192.168.2.22:27020,192.168.2.23:27020 --port 27017 --chunkSize 2

3) start replicaSet1
    (ssh to 192.168.2.41 rep1a): mongod --dbpath /home/vagrant/mongo-data --port 27040 --replSet rep1 --oplogSize 200 --rest
    (ssh to 192.168.2.42 rep1b): mongod --dbpath /home/vagrant/mongo-data --port 27040 --replSet rep1 --oplogSize 200 --rest

4) start replicaSet2
    (ssh to 192.168.2.51 rep2a): mongod --dbpath /home/vagrant/mongo-data --port 27040 --replSet rep2 --oplogSize 200 --rest
    (ssh to 192.168.2.52 rep2b): mongod --dbpath /home/vagrant/mongo-data --port 27040 --replSet rep2 --oplogSize 200 --rest
</code></pre>

<h3>Config the shard</h3>

<pre><code>use mongo clien access any one of query server, and then execute 

    db.runCommand({addshard:'rep1/192.168.2.41:27040,192.168.2.42:27040'})
    db.runCommand({addshard:'rep2/192.168.2.51:27040,192.168.2.52:27040'})
    db.runCommand({listshards:1});

    You will see the shard server has been configured.
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to setup mongo repliSet]]></title>
    <link href="http://wldandan.github.com/blog/2014/04/17/how-to-setup-mongo-repliset-in-one-machine/"/>
    <updated>2014-04-17T09:24:00+08:00</updated>
    <id>http://wldandan.github.com/blog/2014/04/17/how-to-setup-mongo-repliset-in-one-machine</id>
    <content type="html"><![CDATA[<h3>Create one mongo repliSet</h3>

<pre><code>mkdir -p /srv/mongodb/rs0-0 /srv/mongodb/rs0-1 /srv/mongodb/rs0-2
</code></pre>

<h3>Run instances</h3>

<pre><code>mongod --port 27017 --dbpath /srv/mongodb/rs0-0 --replSet rs0 --smallfiles --oplogSize 128
mongod --port 27018 --dbpath /srv/mongodb/rs0-1 --replSet rs0 --smallfiles --oplogSize 128
mongod --port 27019 --dbpath /srv/mongodb/rs0-2 --replSet rs0 --smallfiles --oplogSize 128
</code></pre>

<h3>Enable replicaSet</h3>

<pre><code>mongo --port 27017
rs.initiate()
rs.conf()
rs.status()
</code></pre>

<!--More-->


<h3>Add other instances as repliSet</h3>

<pre><code>* Login to 'primary' node by mongo client

rs.add("&lt;hostname&gt;:27018")
rs.add("&lt;hostname&gt;:27019")
</code></pre>

<h3>Check ReplicatSet config</h3>

<pre><code>* Login to any replicaSet instance

rs.conf()
rs.status()
</code></pre>
]]></content>
  </entry>
  
</feed>
