<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Java | Happy Coding, Happy Life]]></title>
  <link href="http://wldandan.github.com/blog/categories/java/atom.xml" rel="self"/>
  <link href="http://wldandan.github.com/"/>
  <updated>2020-01-18T08:19:09+08:00</updated>
  <id>http://wldandan.github.com/</id>
  <author>
    <name><![CDATA[wldandan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Java 8 - First impression of Lambda Expression]]></title>
    <link href="http://wldandan.github.com/blog/2014/06/19/java-8-functional-programming-and-lambda-expressions/"/>
    <updated>2014-06-19T04:56:00+08:00</updated>
    <id>http://wldandan.github.com/blog/2014/06/19/java-8-functional-programming-and-lambda-expressions</id>
    <content type="html"><![CDATA[<p>One of the most prominent and widely used languages in the world has <strong>Evolved</strong>.</p>

<p>Java ever gave us power on object oriented progrmming and we did the best we could with it.</p>

<p>Now there’s another new elegant way changing the java world-Lambda Expression, that will make our code more expressive, easier to write, less error prone, and easier to parallelize than has been the case with Java.</p>

<h3>Lambda Expression</h3>

<p>Let's start from a simple example:</p>

<p><code>Suppose we’re asked to total the prices greater than $20, discounted by 10%. Let’s do that in the habitual Java way first.</code></p>

<h4>Old way</h4>

<p>```</p>

<pre><code>final List&lt;BigDecimal&gt; prices = Arrays.asList(
    new BigDecimal("10"), new BigDecimal("30"), new BigDecimal("17"), 
    new BigDecimal("20"), new BigDecimal("15"), new BigDecimal("18"), 
new BigDecimal("45"), new BigDecimal("12"));

BigDecimal totalOfDiscountedPrices = BigDecimal.ZERO;   
for(BigDecimal price : prices) { 
        if(price.compareTo(BigDecimal.valueOf(20)) &gt; 0)
                totalOfDiscountedPrices = totalOfDiscountedPrices.add(price.multiply(BigDecimal.valueOf(0.9)));
            }
    System.out.println("Total of discounted prices: " + totalOfDiscountedPrices);
</code></pre>

<p>```</p>

<h4>A Better way</h4>

<p>Now we can do better, a lot better. Our code can resemble the requirement specification. This will help reduce the gap between the business needs and the code that implements it, further reducing the chances of the requirements being misinterpreted.</p>

<p>```</p>

<pre><code>final BigDecimal totalOfDiscountedPrices = 
prices.stream()
  .filter(price -&gt; price.compareTo(BigDecimal.valueOf(20)) &gt; 0)
  .map(price -&gt; price.multiply(BigDecimal.valueOf(0.9)))
  .reduce(BigDecimal.ZERO, BigDecimal::add);

System.out.println("Total of discounted prices: " + totalOfDiscountedPrices);
</code></pre>

<p>```</p>

<p>Instead of explicitly iterating through the prices list, we’re using a few special methods:</p>

<ul>
<li>Using filter() to get the record we are interested</li>
<li>Using map() to transfer to another result set</li>
<li>Using reduce() to compute the total on the result</li>
</ul>


<h3>Summary</h3>

<p>It’s a whole new world in Java. We can now program in an elegant and fluent functional style, with higher-order functions. This can lead to concise code that has fewer errors and is easier to understand, maintain, and parallelize.</p>
]]></content>
  </entry>
  
</feed>
